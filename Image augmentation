import numpy as n
from sklearn.neural_network import BernoulliRBM
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

d = load_digits()
x = d.images
y = d.target

x = x.reshape((len(x), -1)) / 16.0
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

rbm = BernoulliRBM(n_components=64, learning_rate=0.01, n_iter=10)
clf = Pipeline(steps=[('rbm', rbm), ('logistic', LogisticRegression(max_iter=1000))])
clf.fit(x_train, y_train)

x_train_aug = rbm.transform(x_train)
x_test_aug = rbm.transform(x_test)

x_train_aug = x_train_aug.reshape(-1, 8, 8, 1)
x_test_aug = x_test_aug.reshape(-1, 8, 8, 1)

m = Sequential()
m.add(Conv2D(32, (3, 3), activation='relu', input_shape=(8, 8, 1)))
m.add(MaxPooling2D((2, 2)))
m.add(Flatten())
m.add(Dense(64, activation='relu'))
m.add(Dense(10, activation='softmax'))

m.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
m.fit(x_train_aug, y_train, epochs=10, batch_size=32)
